---
import Button from "@/components/Button";
import { type SectionProps, SectionBgType } from "@/types/eventTypes";
import Icon from "./SectionIcon.astro";
import DynamicReactImporter from "./ReactComponentImporter";

type Props = SectionProps;

let { title, actions, bg, icon, subtitle, className } = Astro.props;
if (bg === undefined) {
  bg = {
    sectionBgType: SectionBgType.infoSection,
  };
}

const bgClassNames: { [key in SectionBgType]: string } = {
  [SectionBgType.heroSection]:
    "bg-gradient-to-br from-blue-500 via-blue-800 to-purple-500 text-white ",
  [SectionBgType.heroToInfoViaBlue]:
    "bg-gradient-to-bl from-purple-500 via-blue-800 to-gray-100 ",
  [SectionBgType.infoToInfoViaBlue]:
    "bg-gradient-to-br from-gray-50 via-blue-200 to-gray-50 ",
  [SectionBgType.normalSection]: "network-bg text-white ",
  [SectionBgType.infoSection]: "bg-gray-100 ",
  [SectionBgType.purpleToTealViaBlue]:
    "bg-gradient-to-br from-purple-600 via-blue-600 to-teal-500 text-white ",
  [SectionBgType.blueToPurple]:
    "bg-gradient-to-r from-blue-600 to-purple-600 text-white ",
  [SectionBgType.tealToRedViaLime]:
    "bg-gradient-to-br from-teal-500 via-lime-600 to-red-500 text-white ",
  [SectionBgType.redToPurpleViaLime]:
    "bg-gradient-to-bl from-red-500 via-lime-600 to-purple-600 text-white ",
};

const sectionClassName =
  `${className} ${bgClassNames[bg.sectionBgType]}` +
  (bg.overlay ? " relative overflow-hidden " : "");
---

<section class={"py-20 " + sectionClassName}>
  {
    bg.overlay === "circles" && (
      <div class="absolute inset-0 opacity-10 z-0">
        <div class="absolute top-10 left-10 w-4 h-4 bg-blue-400 rounded-full" />
        <div class="absolute top-20 right-20 w-6 h-6 bg-purple-400 rounded-full" />
        <div class="absolute bottom-20 left-20 w-5 h-5 bg-green-400 rounded-full" />
        <div class="absolute bottom-10 right-10 w-3 h-3 bg-yellow-400 rounded-full" />
        <div class="absolute top-1/2 left-1/4 w-8 h-8 bg-pink-400 rounded-full" />
        <div class="absolute top-1/3 right-1/3 w-7 h-7 bg-indigo-400 rounded-full" />
      </div>
    )
  }
  {
    bg.overlay === "rectangles" && (
      <div class="absolute inset-0 opacity-20 z-0">
        <div class="absolute top-10 left-10 w-16 h-16 border border-yellow-400 rounded-lg transform rotate-12" />
        <div class="absolute top-20 right-20 w-12 h-12 border border-blue-400 rounded-full" />
        <div class="absolute bottom-20 left-20 w-20 h-20 border border-green-400 rounded-lg transform -rotate-12" />
        <div class="absolute bottom-10 right-10 w-8 h-8 border border-purple-400 rounded-full" />
      </div>
    )
  }
  <div
    class="relative inset-0 opacity-100 z-2 px-4 sm:px-6 lg:px-8 text-center"
  >
    {
      icon && (
        <Icon>
          <DynamicReactImporter element={icon} />
        </Icon>
      )
    }
    {title && <h1 class="text-4xl md:text-5xl font-bold mb-6">{title}</h1>}
    {subtitle && <p class="text-lg opacity-90 mb-6">{subtitle}</p>}

    <slot />

    {
      actions && (
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          {actions.map((action) =>
            action.replaceWithChildren ? (
              <DynamicReactImporter element={action.children} />
            ) : (
              <Button variant={action.variant} size="lg">
                {action.children}
              </Button>
            ),
          )}
        </div>
      )
    }
  </div>
</section>

<style>
  .network-bg {
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
  }

  .gradient-bg {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  }
</style>
